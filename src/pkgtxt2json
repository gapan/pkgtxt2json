#!/usr/bin/env python
# vim:et:sta:sts=4:sw=4:ts=8:tw=79:
# -*- coding: utf-8 -*-

from __future__ import print_function
import sys
import os.path
import json

def splitdeps(deps):
    splitdeps = deps.split(',')
    for i in splitdeps:
        i = i.strip()
    splitdeps[:] = [i for i in splitdeps if i != '']
    return ','.join('"{0}"'.format(x) for x in splitdeps)

if len(sys.argv) != 2:
    print("ERROR: you have to provide the path to a PACKAGES.TXT file")
    sys.exit(1)

pkgtxt = sys.argv[1]

if not os.path.isfile(pkgtxt):
    print("ERROR: file {} not found.".format(pkgtxt))
    sys.exit(1)


# location descriptions
locdesc = {
    "a" : "The base system. Contains software to get up and running and have a text editor and basic communications programs",
    "ap" : "Various applications that do not require the X Window System",
    "d" : "Program development tools. Compilers, debuggers, interpreters, and man pages. It's all here",
    "e" : "GNU Emacs",
    "f" : "FAQs, HOWTOs, and other miscellaneous documentation",
    "games" : "Games :)",
    "gnome" : "Applications and libraries from the Gnome project",
    "kde" : "KDE applications (depending on kdelibs)",
    "kdei" : "Localisation packages for KDE applications",
    "l" : "Libraries",
    "locale" : "Localisation Packages",
    "lxde" : "LXDE packages",
    "mate" : "MATE Desktop Environment Packages",
    "n" : "Networking programs. Daemons, mail programs, telnet, news readers, web servers and so on",
    "t" : "teTeX document formatting system",
    "tcl" : "Tcl/tk packages",
    "x" : "X Window System packages",
    "xap" : "Applications that require X to run",
    "xfce" : "Xfce packages",
    "y" : "BSD Games",
    "academic" : "Academic software",
    "accessibility" : "Accessibility packages",
    "audio" : "Audio playback and manipulation",
    "business" : "Business software",
    "desktop" : "Desktop applications",
    "development" : "Development tools",
    "gis" : "Geographic Information System software",
    "graphics" : "Graphics software and libraries",
    "ham" : "HAM radio software",
    "haskell" : "Haskell programming language and tools",
    "libraries" : "Libraries",
    "misc" : "Miscellaneous",
    "multimedia" : "Multimedia software",
    "network" : "Networking tools",
    "office" : "Office software and tools",
    "perl" : "Perl programming language tools and libraries",
    "python" : "Python programming language tools and libraries",
    "ruby" : "Ruby programming language tools and libraries",
    "system" : "System software and tools"
}


locations = []

print('{"packages": [')

with open(pkgtxt, "r") as f:
    readDescription1stLine = False
    readingDescription = False
    firstOne = True
    pkgname = ''
    descriptionShort = ''
    descriptionLong = ''
    for line in f:
        if line.startswith('PACKAGE NAME:'):
            readDescription1stLine = False
            readingDescription = False
            descriptionShort = ''
            descriptionLong = ''
            if not firstOne:
                print(",")
            print('{')
            firstOne = False
            pkgNameFull = line.replace('PACKAGE NAME:', '')
            pkgNameFull = pkgNameFull.strip().rsplit('.', 1)[0].rsplit('-', 3)
            pkgname, pkgver, pkgarch, pkgrel = pkgNameFull
            print('"name": "{}",'.format(pkgname))
            print('"ver": "{}",'.format(pkgver))
            print('"arch": "{}",'.format(pkgarch))
            print('"rel": "{}",'.format(pkgrel))
        elif line.startswith('PACKAGE LOCATION:'):
            location = line.replace('PACKAGE LOCATION:', '').strip()
            location = location.rsplit('/')[-1]
            locations.append(location)
            print('"loc": "{}",'.format(location))
        elif line.startswith('PACKAGE SIZE (compressed):'):
            sizec = line.replace('PACKAGE SIZE (compressed):', '').strip()
            print('"sizec": "{}",'.format(sizec))
        elif line.startswith('PACKAGE SIZE (uncompressed):'):
            sizeu = line.replace('PACKAGE SIZE (uncompressed):', '').strip()
            print('"sizeu": "{}",'.format(sizeu))
        elif line.startswith('PACKAGE REQUIRED:'):
            deps = line.replace('PACKAGE REQUIRED:', '').strip()
            deps = splitdeps(deps)
            if len(deps) > 0:
                print('"deps": [{}],'.format(deps))
        elif line.startswith('PACKAGE CONFLICTS:'):
            deps = line.replace('PACKAGE CONFLICTS:', '').strip()
            deps = splitdeps(deps)
            if len(deps) > 0:
                print('"con": [{}],'.format(deps))
        elif line.startswith('PACKAGE SUGGESTS:'):
            deps = line.replace('PACKAGE SUGGESTS:', '').strip()
            deps = splitdeps(deps)
            if len(deps) > 0:
                print('"sug": [{}],'.format(deps))
        elif line.startswith('PACKAGE DESCRIPTION:'):
            readingDescription = True
        elif line.startswith('{}:'.format(pkgname)):
            descline = line.replace('{}:'.format(pkgname), '').strip()
            descline = descline.replace('"', "'")
            if readingDescription:
                if readDescription1stLine:
                    descriptionLong = descriptionLong + descline + ' '
                else:
                    descriptionShort = descline
                    print('"descs": "{}",'.format(descriptionShort))
                    readDescription1stLine = True
        elif line == '\n':
            if readingDescription:
                descriptionLong = descriptionLong.strip()
                print('"descl": "{}"'.format(descriptionLong))
                readingDescription = False
                readDescription1stLine = False
                print('}', end ='')

print('],')


locations = set(locations)
used_locations = {}
print('"locations": ')

for l in locations:
    used_locations[l] = locdesc[l]

print(json.dumps(used_locations))

print('}')
